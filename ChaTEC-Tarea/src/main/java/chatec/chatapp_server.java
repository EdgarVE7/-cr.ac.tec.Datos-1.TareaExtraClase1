/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatec;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.ServerSocket;
import java.net.Socket;

/**
 * The chatapp_server listens for a client via Port, and displays messages sent/received via socket
 * @author Edgar Vargas
 * @version 1.0
 * @author its_e
 */
public class chatapp_server extends javax.swing.JFrame {

    /**
     * Creates new form chatapp_server
     * We define the private variables to connect the server to the client.
     */
    private static ServerSocket servsock;
    private static Socket sock;
    private static DataInputStream datain;
    private static DataOutputStream dataout;

    public chatapp_server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        chat_display = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        chat_text = new javax.swing.JTextArea();
        chat_send = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ChaTEC");

        chat_display.setColumns(20);
        chat_display.setRows(5);
        jScrollPane1.setViewportView(chat_display);

        chat_text.setColumns(20);
        chat_text.setRows(5);
        jScrollPane2.setViewportView(chat_text);

        chat_send.setText("SEND");
        chat_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chat_sendActionPerformed(evt);
            }
        });

        jLabel2.setText("Server");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(chat_send, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chat_send, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chat_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chat_sendActionPerformed
        // TODO add your handling code here:
        /**
         * try was incorporated as a workaround to an unreported error
         * Created an empty string with the name chatmsg which will consist of the data to send via DataOutputStream
         * The string acquires the string from Input Box. using .getText
         * The input box string is sent via data output stream(using UTF encoding)
         * The chat_display will display sent message
         * The empty set text resets the Input Box text to empty.
        */
        try{          
            String chatmsg="";  
            chatmsg=chat_text.getText(); 
            dataout.writeUTF(chatmsg); 
            chat_display.setText(chat_display.getText()+"\n Server: " + chatmsg);
            chat_text.setText(""); 
            }
         catch(Exception e)
        //Exception is handled here
        {
        }
        
    }//GEN-LAST:event_chat_sendActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chatapp_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chatapp_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chatapp_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chatapp_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chatapp_server().setVisible(true);  
            }
        });
        /**
         * Created a string for receiving message
         * Made an object of ServerSocket to define the port on which the server will listen to incoming connection
         * Server accepts client request using .accept and receives a socket from client, which is stored in socket variable
         * Made Data(Input/Output)Stream objects to receive/send messages
         */
        try {
            String chat_input = "";
            servsock = new ServerSocket(8888);
            sock = servsock.accept();
            datain = new DataInputStream(sock.getInputStream());
            dataout = new DataOutputStream(sock.getOutputStream());
            //While chat input isn't Close Chat the app will continue to receive messages
            while (!chat_input.equals("Close Chat")) {
                chat_input = datain.readUTF();
                chat_display.setText(chat_display.getText() + "\n Client: " + chat_input);
            }

        } catch (Exception e) {
        //Exception is handled here
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextArea chat_display;
    private javax.swing.JButton chat_send;
    private javax.swing.JTextArea chat_text;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
